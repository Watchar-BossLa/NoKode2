import React, { useState, useRef } from 'react';
import { motion } from 'framer-motion';
import Editor from '@monaco-editor/react';
import toast from 'react-hot-toast';
import { 
  Play, 
  Save, 
  Download, 
  Copy, 
  Settings, 
  Eye, 
  Code, 
  FileText,
  RefreshCw,
  Maximize2,
  Minimize2,
  Sun,
  Moon
} from 'lucide-react';

const CodeEditor = () => {
  const [code, setCode] = useState(`import React from 'react';

function App() {
  return (
    <div className="p-8 bg-gradient-to-br from-blue-50 to-purple-50 min-h-screen">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold text-gray-900 mb-6">
          Welcome to Nokode AgentOS
        </h1>
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Generated by AI Agents
          </h2>
          <p className="text-gray-600 mb-4">
            This code was automatically generated by our intelligent agents.
            You can edit, preview, and deploy it directly from this interface.
          </p>
          <button className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg transition-colors">
            Get Started
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;`);
  
  const [language, setLanguage] = useState('javascript');
  const [theme, setTheme] = useState('vs-dark');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const editorRef = useRef(null);

  const languages = [
    { value: 'javascript', label: 'JavaScript' },
    { value: 'typescript', label: 'TypeScript' },
    { value: 'python', label: 'Python' },
    { value: 'html', label: 'HTML' },
    { value: 'css', label: 'CSS' },
    { value: 'json', label: 'JSON' }
  ];

  const themes = [
    { value: 'vs-dark', label: 'Dark', icon: Moon },
    { value: 'light', label: 'Light', icon: Sun }
  ];

  const handleEditorDidMount = (editor, monaco) => {
    editorRef.current = editor;
    
    // Configure editor
    editor.updateOptions({
      fontSize: 14,
      fontFamily: 'JetBrains Mono, Fira Code, monospace',
      lineHeight: 1.6,
      renderWhitespace: 'selection',
      minimap: { enabled: true },
      scrollBeyondLastLine: false,
      automaticLayout: true
    });
  };

  const copyCode = async () => {
    try {
      await navigator.clipboard.writeText(code);
      toast.success('Code copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy code');
    }
  };

  const downloadCode = () => {
    const fileExtensions = {
      javascript: 'js',
      typescript: 'ts',
      python: 'py',
      html: 'html',
      css: 'css',
      json: 'json'
    };

    const extension = fileExtensions[language] || 'txt';
    const blob = new Blob([code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `generated-code.${extension}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Code downloaded successfully!');
  };

  const runCode = () => {
    // Simulate code execution
    toast.success('Code executed successfully!');
    setShowPreview(true);
  };

  const saveCode = () => {
    // Simulate saving code
    localStorage.setItem('saved-code', code);
    toast.success('Code saved successfully!');
  };

  const formatCode = () => {
    if (editorRef.current) {
      editorRef.current.getAction('editor.action.formatDocument').run();
      toast.success('Code formatted!');
    }
  };

  const CodePreview = () => (
    <div className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
      <div className="flex items-center justify-between mb-4">
        <h3 className="font-semibold text-gray-900 dark:text-white">Live Preview</h3>
        <button
          onClick={() => setShowPreview(false)}
          className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
        >
          âœ•
        </button>
      </div>
      
      <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4">
        {language === 'javascript' || language === 'typescript' ? (
          <iframe
            srcDoc={`
              <!DOCTYPE html>
              <html>
                <head>
                  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
                  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
                  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
                  <script src="https://cdn.tailwindcss.com"></script>
                  <style>body { margin: 0; font-family: -apple-system, BlinkMacSystemFont, sans-serif; }</style>
                </head>
                <body>
                  <div id="root"></div>
                  <script type="text/babel">
                    ${code}
                    const root = ReactDOM.createRoot(document.getElementById('root'));
                    root.render(React.createElement(App));
                  </script>
                </body>
              </html>
            `}
            className="w-full h-96 border border-gray-200 dark:border-gray-600 rounded"
            title="Code Preview"
          />
        ) : (
          <pre className="text-sm text-gray-700 dark:text-gray-300 overflow-auto max-h-96">
            {code}
          </pre>
        )}
      </div>
    </div>
  );

  return (
    <div className={`min-h-screen bg-gray-50 dark:bg-gray-900 ${isFullscreen ? 'fixed inset-0 z-50' : 'p-6 lg:p-8'}`}>
      {/* Header */}
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
              Code Editor
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              Edit, preview, and manage your generated code with syntax highlighting and live preview.
            </p>
          </div>
          
          <button
            onClick={() => setIsFullscreen(!isFullscreen)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition-colors"
            title={isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}
          >
            {isFullscreen ? <Minimize2 className="w-5 h-5" /> : <Maximize2 className="w-5 h-5" />}
          </button>
        </div>

        {/* Toolbar */}
        <div className="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-lg border border-gray-200 dark:border-gray-700">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center space-x-4">
              {/* Language Selector */}
              <div className="flex items-center space-x-2">
                <Code className="w-4 h-4 text-gray-400" />
                <select
                  value={language}
                  onChange={(e) => setLanguage(e.target.value)}
                  className="bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg px-3 py-1 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {languages.map(lang => (
                    <option key={lang.value} value={lang.value}>
                      {lang.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Theme Selector */}
              <div className="flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
                {themes.map(({ value, label, icon: Icon }) => (
                  <button
                    key={value}
                    onClick={() => setTheme(value)}
                    className={`flex items-center space-x-1 px-3 py-1 rounded-md text-sm transition-colors ${
                      theme === value
                        ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow-sm'
                        : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'
                    }`}
                  >
                    <Icon className="w-3 h-3" />
                    <span>{label}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex items-center space-x-2">
              <button
                onClick={runCode}
                className="btn-primary text-sm flex items-center space-x-2"
              >
                <Play className="w-4 h-4" />
                <span>Run</span>
              </button>
              
              <button
                onClick={saveCode}
                className="btn-secondary text-sm flex items-center space-x-2"
              >
                <Save className="w-4 h-4" />
                <span>Save</span>
              </button>
              
              <button
                onClick={copyCode}
                className="btn-secondary text-sm flex items-center space-x-2"
              >
                <Copy className="w-4 h-4" />
                <span>Copy</span>
              </button>
              
              <button
                onClick={downloadCode}
                className="btn-secondary text-sm flex items-center space-x-2"
              >
                <Download className="w-4 h-4" />
                <span>Download</span>
              </button>
              
              <button
                onClick={formatCode}
                className="btn-secondary text-sm flex items-center space-x-2"
              >
                <RefreshCw className="w-4 h-4" />
                <span>Format</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Editor and Preview Layout */}
      <div className={`grid gap-6 ${showPreview ? 'lg:grid-cols-2' : 'grid-cols-1'}`}>
        {/* Code Editor */}
        <motion.div
          layout
          className="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden"
        >
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-2">
              <FileText className="w-4 h-4 text-gray-400" />
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                {language}.{language === 'javascript' ? 'js' : language === 'typescript' ? 'ts' : language}
              </span>
            </div>
            
            {!showPreview && (
              <button
                onClick={() => setShowPreview(true)}
                className="btn-secondary text-sm flex items-center space-x-2"
              >
                <Eye className="w-4 h-4" />
                <span>Preview</span>
              </button>
            )}
          </div>
          
          <div style={{ height: isFullscreen ? 'calc(100vh - 200px)' : '500px' }}>
            <Editor
              height="100%"
              language={language}
              theme={theme}
              value={code}
              onChange={setCode}
              onMount={handleEditorDidMount}
              options={{
                selectOnLineNumbers: true,
                roundedSelection: false,
                readOnly: false,
                cursorStyle: 'line',
                automaticLayout: true,
                wordWrap: 'on',
                minimap: { enabled: !isFullscreen }
              }}
            />
          </div>
        </motion.div>

        {/* Live Preview */}
        {showPreview && (
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
          >
            <CodePreview />
          </motion.div>
        )}
      </div>

      {/* Code Statistics */}
      <div className="mt-6 bg-white dark:bg-gray-800 rounded-lg p-4 shadow-lg border border-gray-200 dark:border-gray-700">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div>
            <div className="text-lg font-semibold text-gray-900 dark:text-white">
              {code.split('\n').length}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">Lines</div>
          </div>
          <div>
            <div className="text-lg font-semibold text-gray-900 dark:text-white">
              {code.length}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">Characters</div>
          </div>
          <div>
            <div className="text-lg font-semibold text-gray-900 dark:text-white">
              {code.split(/\s+/).filter(word => word.length > 0).length}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">Words</div>
          </div>
          <div>
            <div className="text-lg font-semibold text-gray-900 dark:text-white">
              {new Blob([code]).size}
            </div>
            <div className="text-xs text-gray-600 dark:text-gray-400">Bytes</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CodeEditor;