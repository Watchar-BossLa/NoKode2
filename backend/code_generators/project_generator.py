"""
Project Generator for Nokode AgentOS
Creates complete full-stack projects with file structure
"""
import os
import zipfile
import tempfile
from typing import Dict, Any
from datetime import datetime
from .react_generator import ReactComponentGenerator
from .fastapi_generator import FastAPIGenerator

class ProjectGenerator:
    def __init__(self):
        self.react_generator = ReactComponentGenerator()
        self.fastapi_generator = FastAPIGenerator()
    
    def generate_full_project(self, blueprint: Dict[str, Any]) -> Dict[str, Any]:
        """Generate a complete full-stack project from blueprint"""
        project_name = blueprint.get('name', 'MyProject').replace(' ', '-').lower()
        
        # Generate frontend files
        frontend_files = self.react_generator.generate_app_from_blueprint(blueprint)
        
        # Generate backend files
        backend_files = self.fastapi_generator.generate_backend_from_blueprint(blueprint)
        
        # Create project structure
        project_structure = {
            'name': project_name,
            'description': blueprint.get('description', ''),
            'created_at': datetime.now().isoformat(),
            'files': {
                'frontend': frontend_files,
                'backend': backend_files,
                'root': self._generate_root_files(project_name, blueprint)
            }
        }
        
        return project_structure
    
    def create_project_zip(self, project_structure: Dict[str, Any]) -> str:
        """Create a downloadable ZIP file of the project"""
        project_name = project_structure['name']
        
        # Create temporary directory
        with tempfile.NamedTemporaryFile(suffix='.zip', delete=False) as tmp_file:
            with zipfile.ZipFile(tmp_file.name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                
                # Add frontend files
                for file_path, content in project_structure['files']['frontend'].items():
                    zipf.writestr(f"{project_name}/frontend/src/{file_path}", content)
                
                # Add backend files
                for file_path, content in project_structure['files']['backend'].items():
                    zipf.writestr(f"{project_name}/backend/{file_path}", content)
                
                # Add root files
                for file_path, content in project_structure['files']['root'].items():
                    zipf.writestr(f"{project_name}/{file_path}", content)
            
            return tmp_file.name
    
    def _generate_root_files(self, project_name: str, blueprint: Dict) -> Dict[str, str]:
        """Generate root-level project files"""
        return {
            'README.md': self._generate_project_readme(project_name, blueprint),
            'docker-compose.yml': self._generate_docker_compose(project_name),
            '.gitignore': self._generate_gitignore(),
            'deploy.sh': self._generate_deploy_script(project_name)
        }
    
    def _generate_project_readme(self, project_name: str, blueprint: Dict) -> str:
        components_count = len(blueprint.get('components', []))
        
        return f"""# {project_name.title()}

A full-stack application generated by **Nokode AgentOS** - the AI-powered no-code platform.

## 🚀 Project Overview

- **Generated from Blueprint**: {blueprint.get('name', 'Unknown')}
- **Description**: {blueprint.get('description', 'No description provided')}
- **Components Generated**: {components_count}
- **Generated on**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## 📁 Project Structure

```
{project_name}/
├── frontend/           # React application
│   ├── src/
│   │   ├── App.jsx    # Main app component
│   │   ├── components/ # Generated components
│   │   └── ...
│   ├── package.json
│   └── tailwind.config.js
├── backend/            # FastAPI application
│   ├── main.py        # FastAPI main app
│   ├── models/        # Database models
│   ├── routes/        # API endpoints
│   └── requirements.txt
├── docker-compose.yml  # Development environment
└── README.md          # This file
```

## 🛠️ Quick Start

### Prerequisites
- Node.js 18+ and npm/yarn
- Python 3.11+
- Docker (optional)

### Option 1: Local Development

1. **Start the Backend:**
   ```bash
   cd backend
   pip install -r requirements.txt
   uvicorn main:app --reload --port 8000
   ```

2. **Start the Frontend:**
   ```bash
   cd frontend
   npm install
   npm start
   ```

3. **Access the Application:**
   - Frontend: http://localhost:3000
   - Backend API: http://localhost:8000
   - API Documentation: http://localhost:8000/docs

### Option 2: Docker Development

```bash
docker-compose up -d
```

## 🌟 Features

### Frontend
- ✅ Modern React 18 with Hooks
- ✅ Tailwind CSS for styling
- ✅ Responsive design
- ✅ Component-based architecture
- ✅ Production-ready build process

### Backend
- ✅ FastAPI with automatic OpenAPI documentation
- ✅ Database models with SQLAlchemy
- ✅ RESTful API endpoints
- ✅ CORS enabled for frontend integration
- ✅ Production-ready structure

## 🚀 Deployment

### Frontend Deployment (Vercel/Netlify)
```bash
cd frontend
npm run build
# Deploy the 'build' folder
```

### Backend Deployment (Heroku/Railway)
```bash
cd backend
# Add your deployment configuration
```

### Full Stack Deployment (Docker)
```bash
docker-compose -f docker-compose.prod.yml up -d
```

## 🔧 Customization

This generated code is fully customizable:

1. **Add New Components**: Create new React components in `frontend/src/components/`
2. **Extend API**: Add new routes in `backend/routes/`
3. **Database Changes**: Modify models in `backend/models/`
4. **Styling**: Update Tailwind configuration or add custom CSS

## 📚 Documentation

- **Frontend Documentation**: See `frontend/README.md`
- **Backend Documentation**: See `backend/README.md`
- **API Documentation**: Visit `/docs` when backend is running

## 🤝 Support

This project was generated by Nokode AgentOS. For support:
- 📧 Contact: support@nokode.ai
- 🌐 Website: https://nokode.ai
- 📖 Documentation: https://docs.nokode.ai

## 📄 License

This generated code is provided as-is and can be modified and distributed according to your needs.

---

**Generated with ❤️ by Nokode AgentOS**  
*The future of AI-powered application development*
"""
    
    def _generate_docker_compose(self, project_name: str) -> str:
        return f"""version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./app.db
      - CORS_ORIGINS=http://localhost:3000
    volumes:
      - ./backend:/app
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: {project_name}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
"""
    
    def _generate_gitignore(self) -> str:
        return """# Dependencies
node_modules/
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
pip-log.txt
pip-delete-this-directory.txt
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.git
.mypy_cache
.pytest_cache
.hypothesis

# Production builds
/build
/dist
*.egg-info/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Database
*.db
*.sqlite
*.sqlite3

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Docker
docker-compose.override.yml
"""
    
    def _generate_deploy_script(self, project_name: str) -> str:
        return f"""#!/bin/bash

# Deployment script for {project_name}
# Generated by Nokode AgentOS

echo "🚀 Deploying {project_name.title()}..."

# Build frontend
echo "📦 Building frontend..."
cd frontend
npm install
npm run build

# Prepare backend
echo "🔧 Preparing backend..."
cd ../backend
pip install -r requirements.txt

# Optional: Run tests
echo "🧪 Running tests..."
# python -m pytest tests/

echo "✅ Deployment preparation complete!"
echo ""
echo "Next steps:"
echo "1. Deploy frontend 'build' folder to your static hosting service"
echo "2. Deploy backend to your preferred cloud platform"
echo "3. Update environment variables for production"
echo ""
echo "🌟 Your app is ready for the world!"
"""

    def get_project_stats(self, project_structure: Dict[str, Any]) -> Dict[str, Any]:
        """Get statistics about the generated project"""
        frontend_files = project_structure['files']['frontend']
        backend_files = project_structure['files']['backend']
        
        # Count lines of code
        frontend_loc = sum(len(content.split('\n')) for content in frontend_files.values())
        backend_loc = sum(len(content.split('\n')) for content in backend_files.values())
        
        return {
            'project_name': project_structure['name'],
            'total_files': len(frontend_files) + len(backend_files),
            'frontend_files': len(frontend_files),
            'backend_files': len(backend_files),
            'total_lines_of_code': frontend_loc + backend_loc,
            'frontend_loc': frontend_loc,
            'backend_loc': backend_loc,
            'technologies': {
                'frontend': ['React', 'Tailwind CSS', 'JavaScript'],
                'backend': ['FastAPI', 'Python', 'SQLAlchemy', 'Pydantic']
            },
            'estimated_development_time': self._estimate_development_time(frontend_files, backend_files),
            'complexity_score': self._calculate_complexity_score(project_structure)
        }
    
    def _estimate_development_time(self, frontend_files: Dict, backend_files: Dict) -> str:
        """Estimate how long this would take to build manually"""
        total_files = len(frontend_files) + len(backend_files)
        
        if total_files < 10:
            return "2-3 days"
        elif total_files < 20:
            return "1-2 weeks"
        elif total_files < 30:
            return "2-4 weeks"
        else:
            return "1-2 months"
    
    def _calculate_complexity_score(self, project_structure: Dict) -> str:
        """Calculate complexity score based on features"""
        components = len(project_structure.get('files', {}).get('frontend', {}))
        models = len([f for f in project_structure.get('files', {}).get('backend', {}) if f.startswith('models/')])
        
        score = components * 2 + models * 3
        
        if score < 10:
            return "Simple"
        elif score < 25:
            return "Moderate"
        elif score < 40:
            return "Complex"
        else:
            return "Enterprise"